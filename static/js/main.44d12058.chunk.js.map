{"version":3,"sources":["components/Cell.js","components/Row.js","gameOfLife.js","components/World.js","App.js","serviceWorker.js","index.js"],"names":["Cell","render","react_default","a","createElement","className","_this","props","alive","onClick","React","Component","Row","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","row","col","event","handleCellClick","cells","map","index","src_components_Cell","key","bind","assertThisInitialized","getCell","world","length","getNeighbours","countAliveNeighbours","filter","cell","tickCell","aliveNeighbours","gameOfLife","parseDiagram","raw","aliveChar","arguments","undefined","trim","split","line","setCell","newWorld","slice","tick","nextGeneration","nextGen","push","World","WORLD_WIDTH","WORLD_HEIGHT","componentDidMount","randomizeWorld","interval","setInterval","tickDuration","componentWillUnmount","clearInterval","componentWillUpdate","paused","oldWorld","state","Game","setState","oldCellState","clearWorld","newState","Math","random","src_components_Row","App","handlePauseButtonClick","handleTickDurationInputChange","Number","target","value","handleClearButtonClick","worldRef","current","handleRandomButtonClick","type","step","min","onChange","src_components_World","assign","ref","createRef","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44d12058.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nclass Cell extends React.Component {\n  render = () => {\n    return <div className={\"Cell \" + (this.props.alive ? 'alive' : 'dead')} onClick={this.props.onClick}></div>\n  }\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\nimport './Row.css';\n\nclass Row extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = (row, col) => event => {\n    this.props.handleCellClick(row, col);\n  }\n\n\n  render = () => {\n    return <div className=\"Row\">\n      {this.props.cells.map((alive, index) => <Cell key={this.props.row + 'x' + index} alive={alive} onClick={this.handleClick(this.props.row, index)}></Cell>)}\n    </div>\n  }\n}\n\nexport default Row;","const parseDiagram = (raw, aliveChar=\"1\") => {\n  let lines = raw.trim().split(\"\\n\");\n  let world = lines.map(line => line.trim().split(\"\").map(cell => cell === aliveChar));\n  return world;\n}\n\nconst getCell = (world, row, col) => {\n  if (\n    row < 0\n    || col < 0\n    || row >= world.length\n    || col >= world[row].length\n  ) return undefined;\n  else return world[row][col];\n}\n\nconst setCell = (world, row, col, alive=true) => {\n  let newWorld = world.map(row => row.slice());\n  newWorld[row][col] = alive;\n  return newWorld;\n}\n\nconst getNeighbours = (world, row, col) => {\n  return [\n    getCell(world, row - 1, col),\n    getCell(world, row - 1, col + 1),\n    getCell(world, row,     col + 1),\n    getCell(world, row + 1, col + 1),\n    getCell(world, row + 1, col),\n    getCell(world, row + 1, col - 1),\n    getCell(world, row,     col - 1),\n    getCell(world, row - 1, col - 1)\n  ];\n}\n\nconst countAliveNeighbours = (world, row, col) => {\n  return getNeighbours(world, row, col).filter(cell => cell === true).length;\n}\n\nconst tickCell =  (world, row, col) => {\n  let alive = getCell(world, row, col);\n  let aliveNeighbours = countAliveNeighbours(world, row, col);\n\n  if (alive  && aliveNeighbours < 2)                              return false; // Death by underpopulation\n  if (alive  && (aliveNeighbours === 2 || aliveNeighbours === 3)) return true; // Live on\n  if (alive  && aliveNeighbours > 3)                              return false; // Death by overpopulation\n  if (!alive && aliveNeighbours === 3)                            return true; // Reproduction\n\n  return alive; // Remain dead\n}\n\nconst tick = world => {\n  let nextGeneration = [];\n  for (let row = 0; row < world.length; row++) {\n    nextGeneration[row] = [];\n    for (let col = 0; col < world[row].length; col++) {\n      let nextGen = tickCell(world, row, col);\n      nextGeneration[row].push(nextGen);\n    }\n  }\n  return nextGeneration;\n}\n\nexport default { parseDiagram, getCell, setCell, getNeighbours, countAliveNeighbours, tickCell, tick };","import React from 'react';\nimport Row from './Row';\nimport './World.css';\nimport Game from \"../gameOfLife\";\n\nclass World extends React.Component {\n\n  WORLD_WIDTH = 32;\n  WORLD_HEIGHT = 48;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      world: []\n    }\n\n    this.handleCellClick = this.handleCellClick.bind(this);\n  }\n\n  componentDidMount = () => {\n    this.randomizeWorld();\n    this.interval = setInterval(this.tick, this.props.tickDuration);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  }\n\n  componentWillUpdate = () => {\n    clearInterval(this.interval);\n    this.interval = setInterval(this.tick, this.props.tickDuration);\n  }\n\n  tick = () => {\n    if (!this.props.paused) {\n      let oldWorld = this.state.world;\n      let newWorld = Game.tick(oldWorld);\n      this.setState({world: newWorld});\n    }\n  }\n\n  handleCellClick = (row, col) => {\n    let oldWorld = this.state.world;\n    let oldCellState = Game.getCell(oldWorld, row, col);\n    let newWorld = Game.setCell(oldWorld, row, col, !oldCellState);\n    this.setState({world: newWorld});\n  }\n\n  clearWorld = () => {\n    let newState = [];\n    for (let row = 0; row < this.WORLD_WIDTH; row++) {\n      newState[row] = [];\n      for (let col = 0; col < this.WORLD_HEIGHT; col++) {\n        newState[row].push(false);\n      }\n    }\n    this.setState({world: newState});\n  }\n\n  randomizeWorld = () => {\n    let newState = [];\n    for (let row = 0; row < this.WORLD_WIDTH; row++) {\n      newState[row] = [];\n      for (let col = 0; col < this.WORLD_HEIGHT; col++) {\n        newState[row].push(Math.random() > .75);\n      }\n    }\n    this.setState({world: newState});\n  }\n\n  render = () => {\n    return <div className=\"World\">\n      {this.state.world.map((row, index) => <Row key={index} row={index} cells={row} handleCellClick={this.handleCellClick}></Row>)}\n    </div>\n  }\n}\n\nexport default World;","import React from 'react';\nimport './App.css';\nimport World from './components/World';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      paused: false,\n      tickDuration: 1000,\n    }\n\n    this.worldRef = React.createRef();\n\n    this.handlePauseButtonClick = this.handlePauseButtonClick.bind(this);\n    this.handleTickDurationInputChange = this.handleTickDurationInputChange.bind(this);\n    this.handleClearButtonClick = this.handleClearButtonClick.bind(this);\n    this.handleRandomButtonClick = this.handleRandomButtonClick.bind(this);\n  }\n\n  handlePauseButtonClick = () => {\n    this.setState({\n      paused: !this.state.paused\n    });\n  }\n\n  handleTickDurationInputChange = event => {\n    this.setState({\n      tickDuration: Number(event.target.value)\n    });\n  }\n\n  handleClearButtonClick = () => {\n    this.worldRef.current.clearWorld();\n  }\n\n  handleRandomButtonClick = () => {\n    this.worldRef.current.randomizeWorld();\n  }\n\n  render = () => {\n    let props = { \n      paused: this.state.paused,\n      tickDuration: this.state.tickDuration\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Game of Life</h1>\n        <div className=\"controls\">\n          <button onClick={this.handlePauseButtonClick}>{this.state.paused ? \"Resume\" : \"Pause\"}</button>\n          <label>Tick Duration: <input type=\"number\" step=\"100\" min=\"100\" value={this.state.tickDuration} onChange={this.handleTickDurationInputChange}></input></label>\n        </div>\n        <div className=\"controls\">\n          <button onClick={this.handleClearButtonClick}>Clear</button>\n          <button onClick={this.handleRandomButtonClick}>Random</button>\n        </div>\n        <World {...props} ref={this.worldRef}></World>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}