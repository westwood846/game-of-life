{"version":3,"sources":["actions/action-types.js","gameOfLife.js","actions/index.js","reducers/index.js","store/index.js","components/Cell.js","components/Row.js","components/World.js","App.js","serviceWorker.js","index.js"],"names":["TOGGLE_PAUSED","SET_TICK_DURATION","TICK","RANDOMIZE","CLEAR","TOGGLE_CELL","getCell","world","row","col","length","setCell","alive","arguments","undefined","newWorld","map","slice","getNeighbours","countAliveNeighbours","filter","cell","tickCell","aliveNeighbours","gameOfLife","parseDiagram","raw","aliveChar","trim","split","line","newEmptyWorld","width","height","push","newRandomWorld","density","Math","random","toggleCell","getPopulation","Number","reduce","aliveOverall","aliveInRow","tick","nextGeneration","nextGen","manual","type","payload","WORLD_WIDTH","WORLD_HEIGHT","initialState","paused","tickDuration","Game","generation","tickInterval","setInterval","store","dispatch","rootReducer","state","action","Object","objectSpread","clearInterval","createStore","Cell","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCellClick","render","react_default","a","createElement","className","onClick","bind","assertThisInitialized","React","Component","connect","Row","cells","index","src_components_Cell","key","World","src_components_Row","App","handleTickDurationInputChange","event","newTickDuration","target","value","setTickDuration","togglePaused","step","min","onChange","randomize","clear","src_components_World","Boolean","window","location","hostname","match","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42f71927.chunk.js","sourcesContent":["export const TOGGLE_PAUSED     = \"TOGGLE_PAUSED\";\nexport const SET_TICK_DURATION = \"SET_TICK_DURATION\";\nexport const TICK              = \"TICK\";\nexport const RANDOMIZE         = \"RANDOMIZE\";\nexport const CLEAR             = \"CLEAR\";\nexport const TOGGLE_CELL       = \"TOGGLE_CELL\";","const parseDiagram = (raw, aliveChar=\"1\") => {\n  let lines = raw.trim().split(\"\\n\");\n  let world = lines.map(line => line.trim().split(\"\").map(cell => cell === aliveChar));\n  return world;\n}\n\nconst newEmptyWorld = (width, height) => {\n  let world = [];\n  for (let row = 0; row < height; row++) {\n    world[row] = [];\n    for (let col = 0; col < width; col++) {\n      world[row].push(false);\n    }\n  }\n  return world;\n}\n\nconst newRandomWorld = (width, height, density = .2) => {\n  let world = [];\n  for (let row = 0; row < height; row++) {\n    world[row] = [];\n    for (let col = 0; col < width; col++) {\n      world[row].push(Math.random() <= density);\n    }\n  }\n  return world;\n}\n\nconst getCell = (world, row, col) => {\n  if (\n    row < 0\n    || col < 0\n    || row >= world.length\n    || col >= world[row].length\n  ) return undefined;\n  else return world[row][col];\n}\n\nconst setCell = (world, row, col, alive=true) => {\n  let newWorld = world.map(row => row.slice());\n  newWorld[row][col] = alive;\n  return newWorld;\n}\n\nconst toggleCell = (world, row, col) => {\n  return setCell(world, row, col, !getCell(world, row, col));\n}\n\nconst getNeighbours = (world, row, col) => {\n  return [\n    getCell(world, row - 1, col),\n    getCell(world, row - 1, col + 1),\n    getCell(world, row,     col + 1),\n    getCell(world, row + 1, col + 1),\n    getCell(world, row + 1, col),\n    getCell(world, row + 1, col - 1),\n    getCell(world, row,     col - 1),\n    getCell(world, row - 1, col - 1)\n  ];\n}\n\nconst countAliveNeighbours = (world, row, col) => {\n  return getNeighbours(world, row, col).filter(cell => cell === true).length;\n}\n\nconst getPopulation = world => {\n  return world.map(row => Number(row.filter(alive => alive).length)).reduce((aliveOverall, aliveInRow) => aliveOverall + aliveInRow, 0);\n}\n\nconst tickCell =  (world, row, col) => {\n  let alive = getCell(world, row, col);\n  let aliveNeighbours = countAliveNeighbours(world, row, col);\n\n  if (alive  && aliveNeighbours < 2)                              return false; // Death by underpopulation\n  if (alive  && (aliveNeighbours === 2 || aliveNeighbours === 3)) return true; // Live on\n  if (alive  && aliveNeighbours > 3)                              return false; // Death by overpopulation\n  if (!alive && aliveNeighbours === 3)                            return true; // Reproduction\n\n  return alive; // Remain dead\n}\n\nconst tick = world => {\n  let nextGeneration = [];\n  for (let row = 0; row < world.length; row++) {\n    nextGeneration[row] = [];\n    for (let col = 0; col < world[row].length; col++) {\n      let nextGen = tickCell(world, row, col);\n      nextGeneration[row].push(nextGen);\n    }\n  }\n  return nextGeneration;\n}\n\nexport default { parseDiagram, newEmptyWorld, newRandomWorld, getCell, setCell, toggleCell, getNeighbours, countAliveNeighbours, getPopulation, tickCell, tick };","import { TOGGLE_PAUSED, SET_TICK_DURATION, TICK, RANDOMIZE, CLEAR, TOGGLE_CELL } from './action-types';\n\nexport const togglePaused    = ()               => ({type: TOGGLE_PAUSED});\nexport const setTickDuration = tickDuration     => ({type: SET_TICK_DURATION, payload: tickDuration});\nexport const tick            = (manual = false) => ({type: TICK, payload: {manual}});\nexport const randomize       = ()               => ({type: RANDOMIZE});\nexport const clear           = ()               => ({type: CLEAR});\nexport const toggleCell      = (row, col)       => ({type: TOGGLE_CELL, payload: {row, col}});","import { TOGGLE_PAUSED, SET_TICK_DURATION, TICK, RANDOMIZE, CLEAR, TOGGLE_CELL } from \"../actions/action-types\";\nimport Game from \"../gameOfLife\";\nimport store from '../store/index';\nimport { tick } from '../actions/index';\n\nconst WORLD_WIDTH = 64;\nconst WORLD_HEIGHT = 40;\n\nconst initialState = {\n  paused: false,\n  tickDuration: 500,\n  world: Game.newRandomWorld(WORLD_WIDTH, WORLD_HEIGHT),\n  generation: 0\n};\ninitialState.tickInterval = setInterval(() => store.dispatch(tick()), initialState.tickDuration);\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === TOGGLE_PAUSED)     return { ...state, paused: !state.paused };\n\n  if (action.type === SET_TICK_DURATION) {\n    clearInterval(state.tickInterval);\n    return { \n      ...state,\n      tickDuration: action.payload,\n      tickInterval: setInterval(() => store.dispatch(tick()), action.payload)\n    };\n  }\n\n  if (action.type === TICK) {\n    if (!state.paused || action.payload.manual) {\n      return {\n        ...state,\n        world: Game.tick(state.world),\n        generation: state.generation + 1\n      }\n    } else {\n      return state;\n    }\n  };\n\n  if (action.type === RANDOMIZE)         return { ...state, world: Game.newRandomWorld(WORLD_WIDTH, WORLD_HEIGHT), generation: 0 };\n  if (action.type === CLEAR)             return { ...state, world: Game.newEmptyWorld(WORLD_WIDTH, WORLD_HEIGHT), generation: 0, paused: true };\n  if (action.type === TOGGLE_CELL)       return { ...state, world: Game.toggleCell(state.world, action.payload.row, action.payload.col) };\n  return state;\n};\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './Cell.css';\nimport { toggleCell } from '../actions/index';\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCellClick = this.handleCellClick.bind(this);\n  }\n\n  handleCellClick = () => {\n    this.props.toggleCell(this.props.row, this.props.col);\n  }\n\n  render = () => {\n    return <div className={\"Cell \" + (this.props.alive ? 'alive' : 'dead')} onClick={this.handleCellClick}></div>\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  toggleCell: (row, col) => dispatch(toggleCell(row, col))\n})\n\nexport default connect(null, mapDispatchToProps)(Cell);","import React from 'react';\nimport Cell from './Cell';\nimport './Row.css';\n\nclass Row extends React.Component {\n  render = () => {\n    return <div className=\"Row\">\n      {this.props.cells.map((alive, index) => <Cell key={this.props.row + 'x' + index} alive={alive} row={this.props.row} col={index}></Cell>)}\n    </div>\n  }\n}\n\nexport default Row;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Row from './Row';\nimport './World.css';\nimport { tick } from '../actions/index';\n\nclass World extends React.Component {\n  render = () => {\n    return <div className=\"World\">\n      {this.props.world.map((row, index) => <Row key={index} row={index} cells={row}></Row>)}\n    </div>\n  }\n}\n\nconst mapStateToProps = state => ({...state});\n\nconst mapDispatchToProps = dispatch => ({\n  tick: () => dispatch(tick())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(World);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport World from './components/World';\nimport { togglePaused, setTickDuration, tick, randomize, clear } from \"./actions/index\";\nimport Game from './gameOfLife';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTickDurationInputChange = this.handleTickDurationInputChange.bind(this);\n  }\n\n  handleTickDurationInputChange = event => {\n    let newTickDuration = Number(event.target.value);\n    this.props.setTickDuration(newTickDuration);\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <h1>Game of Life</h1>\n        <div className=\"controls\">\n          <button onClick={this.props.togglePaused}>{this.props.paused ? \"Resume\" : \"Pause\"}</button>\n          <label>Tick Duration: <input type=\"number\" step=\"100\" min=\"100\" value={this.props.tickDuration} onChange={this.handleTickDurationInputChange}></input></label>\n          <button onClick={this.props.tick(true)}>Tick</button>\n        </div>\n        <div className=\"controls\">\n          <button onClick={this.props.randomize}>Randomize</button>\n          <button onClick={this.props.clear}>Clear</button>\n        </div>\n        <World></World>\n        <div className=\"statusbar\">\n          <span>Generation: {this.props.generation}</span>\n          <span>Population: {Game.getPopulation(this.props.world)}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  paused: state.paused,\n  tickDuration: state.tickDuration,\n  world: state.world,\n  generation: state.generation\n})\n\nconst mapDispatchToProps = dispatch => ({\n  togglePaused:    ()           => dispatch(togglePaused()),\n  setTickDuration: tickDuration => dispatch(setTickDuration(tickDuration)),\n  tick:            manual => () => dispatch(tick(manual)),\n  randomize:       ()           => dispatch(randomize()),\n  clear:           ()           => dispatch(clear()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}